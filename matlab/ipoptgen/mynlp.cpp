#include "mynlp.hpp"
#include <cassert>
#include <cmath>
using namespace Ipopt;

bool HS071_NLP::get_nlp_info(Index& n, Index& m, Index& nnz_jac_g, Index& nnz_h_lag, IndexStyleEnum& index_style)
{
  n = 16;
  m = 91;
  nnz_jac_g = 213;
  nnz_h_lag = 12;
  index_style = TNLP::C_STYLE;
  return true;
}

bool HS071_NLP::get_bounds_info(Index n, Number* x_l, Number* x_u, Index m, Number* g_l, Number* g_u)
{
  x_l[0] = 0.000000;
  x_u[0] = 8.940000;
  x_l[1] = 0.000000;
  x_u[1] = 8.940000;
  x_l[2] = 0.000000;
  x_u[2] = 8.940000;
  x_l[3] = 0.000000;
  x_u[3] = 8.940000;
  x_l[4] = 0.000000;
  x_u[4] = 8.940000;
  x_l[5] = 0.000000;
  x_u[5] = 8.940000;
  x_l[6] = 0.000000;
  x_u[6] = 8.940000;
  x_l[7] = 0.000000;
  x_u[7] = 8.940000;
  x_l[8] = 0.000000;
  x_u[8] = 8.940000;
  x_l[9] = 0.000000;
  x_u[9] = 8.940000;
  x_l[10] = 0.000000;
  x_u[10] = 8.940000;
  x_l[11] = 0.000000;
  x_u[11] = 8.940000;
  x_l[12] = 0.000000;
  x_u[12] = 8.940000;
  x_l[13] = 0.000000;
  x_u[13] = 8.940000;
  x_l[14] = 0.000000;
  x_u[14] = 8.940000;
  x_l[15] = 0.000000;
  x_u[15] = 8.940000;
  g_l[0] = -200000000000000000000.000000;
  g_u[0] = 0.000000;
  g_l[1] = -200000000000000000000.000000;
  g_u[1] = 0.000000;
  g_l[2] = -200000000000000000000.000000;
  g_u[2] = 0.000000;
  g_l[3] = -200000000000000000000.000000;
  g_u[3] = 0.000000;
  g_l[4] = -200000000000000000000.000000;
  g_u[4] = 0.000000;
  g_l[5] = -200000000000000000000.000000;
  g_u[5] = 0.000000;
  g_l[6] = -200000000000000000000.000000;
  g_u[6] = 0.000000;
  g_l[7] = -200000000000000000000.000000;
  g_u[7] = 0.000000;
  g_l[8] = -200000000000000000000.000000;
  g_u[8] = 0.000000;
  g_l[9] = -200000000000000000000.000000;
  g_u[9] = 0.000000;
  g_l[10] = -200000000000000000000.000000;
  g_u[10] = 0.000000;
  g_l[11] = -200000000000000000000.000000;
  g_u[11] = 0.000000;
  g_l[12] = -200000000000000000000.000000;
  g_u[12] = 0.000000;
  g_l[13] = -200000000000000000000.000000;
  g_u[13] = 0.000000;
  g_l[14] = -200000000000000000000.000000;
  g_u[14] = 0.000000;
  g_l[15] = -200000000000000000000.000000;
  g_u[15] = 0.000000;
  g_l[16] = -200000000000000000000.000000;
  g_u[16] = 0.000000;
  g_l[17] = -200000000000000000000.000000;
  g_u[17] = 0.000000;
  g_l[18] = -200000000000000000000.000000;
  g_u[18] = 0.000000;
  g_l[19] = -200000000000000000000.000000;
  g_u[19] = 0.000000;
  g_l[20] = -200000000000000000000.000000;
  g_u[20] = 0.000000;
  g_l[21] = -200000000000000000000.000000;
  g_u[21] = 0.000000;
  g_l[22] = -200000000000000000000.000000;
  g_u[22] = 0.000000;
  g_l[23] = -200000000000000000000.000000;
  g_u[23] = 0.000000;
  g_l[24] = -200000000000000000000.000000;
  g_u[24] = 0.000000;
  g_l[25] = -200000000000000000000.000000;
  g_u[25] = 0.000000;
  g_l[26] = -200000000000000000000.000000;
  g_u[26] = 0.000000;
  g_l[27] = -200000000000000000000.000000;
  g_u[27] = 0.000000;
  g_l[28] = -200000000000000000000.000000;
  g_u[28] = 0.000000;
  g_l[29] = -200000000000000000000.000000;
  g_u[29] = 0.000000;
  g_l[30] = -200000000000000000000.000000;
  g_u[30] = 0.000000;
  g_l[31] = -200000000000000000000.000000;
  g_u[31] = 0.000000;
  g_l[32] = -200000000000000000000.000000;
  g_u[32] = 0.000000;
  g_l[33] = -200000000000000000000.000000;
  g_u[33] = 0.000000;
  g_l[34] = -200000000000000000000.000000;
  g_u[34] = 0.000000;
  g_l[35] = -200000000000000000000.000000;
  g_u[35] = 0.000000;
  g_l[36] = -200000000000000000000.000000;
  g_u[36] = 0.000000;
  g_l[37] = -200000000000000000000.000000;
  g_u[37] = 0.000000;
  g_l[38] = -200000000000000000000.000000;
  g_u[38] = 0.000000;
  g_l[39] = -200000000000000000000.000000;
  g_u[39] = 0.000000;
  g_l[40] = -200000000000000000000.000000;
  g_u[40] = 0.000000;
  g_l[41] = -200000000000000000000.000000;
  g_u[41] = 0.000000;
  g_l[42] = -200000000000000000000.000000;
  g_u[42] = 0.000000;
  g_l[43] = -200000000000000000000.000000;
  g_u[43] = 0.000000;
  g_l[44] = -200000000000000000000.000000;
  g_u[44] = 0.000000;
  g_l[45] = -200000000000000000000.000000;
  g_u[45] = 0.000000;
  g_l[46] = -200000000000000000000.000000;
  g_u[46] = 0.000000;
  g_l[47] = -200000000000000000000.000000;
  g_u[47] = 0.000000;
  g_l[48] = -200000000000000000000.000000;
  g_u[48] = 0.000000;
  g_l[49] = -200000000000000000000.000000;
  g_u[49] = 0.000000;
  g_l[50] = -200000000000000000000.000000;
  g_u[50] = 0.000000;
  g_l[51] = -200000000000000000000.000000;
  g_u[51] = 0.000000;
  g_l[52] = -200000000000000000000.000000;
  g_u[52] = 0.000000;
  g_l[53] = -200000000000000000000.000000;
  g_u[53] = 0.000000;
  g_l[54] = -200000000000000000000.000000;
  g_u[54] = 0.000000;
  g_l[55] = -200000000000000000000.000000;
  g_u[55] = 0.000000;
  g_l[56] = -200000000000000000000.000000;
  g_u[56] = 0.000000;
  g_l[57] = -200000000000000000000.000000;
  g_u[57] = 0.000000;
  g_l[58] = -200000000000000000000.000000;
  g_u[58] = 0.000000;
  g_l[59] = -200000000000000000000.000000;
  g_u[59] = 0.000000;
  g_l[60] = -200000000000000000000.000000;
  g_u[60] = 0.000000;
  g_l[61] = -200000000000000000000.000000;
  g_u[61] = 0.000000;
  g_l[62] = -200000000000000000000.000000;
  g_u[62] = 0.000000;
  g_l[63] = -200000000000000000000.000000;
  g_u[63] = 0.000000;
  g_l[64] = -200000000000000000000.000000;
  g_u[64] = 0.000000;
  g_l[65] = -200000000000000000000.000000;
  g_u[65] = 0.000000;
  g_l[66] = -200000000000000000000.000000;
  g_u[66] = 0.000000;
  g_l[67] = -200000000000000000000.000000;
  g_u[67] = 0.000000;
  g_l[68] = -200000000000000000000.000000;
  g_u[68] = 0.000000;
  g_l[69] = -200000000000000000000.000000;
  g_u[69] = 0.000000;
  g_l[70] = -200000000000000000000.000000;
  g_u[70] = 0.000000;
  g_l[71] = -200000000000000000000.000000;
  g_u[71] = 0.000000;
  g_l[72] = -200000000000000000000.000000;
  g_u[72] = 0.000000;
  g_l[73] = -200000000000000000000.000000;
  g_u[73] = 0.000000;
  g_l[74] = -200000000000000000000.000000;
  g_u[74] = 0.000000;
  g_l[75] = -200000000000000000000.000000;
  g_u[75] = 0.000000;
  g_l[76] = -200000000000000000000.000000;
  g_u[76] = 0.000000;
  g_l[77] = -200000000000000000000.000000;
  g_u[77] = 0.000000;
  g_l[78] = -200000000000000000000.000000;
  g_u[78] = 0.000000;
  g_l[79] = -200000000000000000000.000000;
  g_u[79] = 0.000000;
  g_l[80] = -200000000000000000000.000000;
  g_u[80] = 0.000000;
  g_l[81] = -200000000000000000000.000000;
  g_u[81] = 0.000000;
  g_l[82] = -200000000000000000000.000000;
  g_u[82] = 0.000000;
  g_l[83] = -200000000000000000000.000000;
  g_u[83] = 0.000000;
  g_l[84] = 0.000000;
  g_u[84] = 0.000000;
  g_l[85] = 0.000000;
  g_u[85] = 0.000000;
  g_l[86] = 0.000000;
  g_u[86] = 0.000000;
  g_l[87] = 0.000000;
  g_u[87] = 0.000000;
  g_l[88] = 0.000000;
  g_u[88] = 0.000000;
  g_l[89] = 0.000000;
  g_u[89] = 0.000000;
  g_l[90] = -200000000000000000000.000000;
  g_u[90] = 0.000000;
  return true;
}

bool HS071_NLP::get_starting_point(Index n, bool init_x, Number* x, bool init_z, Number* z_L, Number* z_U, Index m, bool init_lambda, Number* lambda)
{
  assert(init_x == true);
  assert(init_z == false);
  assert(init_lambda == false);

  x[0] = 0.000000;
  x[1] = 5.201342;
  x[2] = 0.000000;
  x[3] = 3.020134;
  x[4] = 0.000000;
  x[5] = 6.879195;
  x[6] = 4.698138;
  x[7] = 4.698138;
  x[8] = 0.000000;
  x[9] = 5.201342;
  x[10] = 0.000000;
  x[11] = 4.513650;
  x[12] = 0.000000;
  x[13] = 6.879195;
  x[14] = 4.698138;
  x[15] = 4.698138;
  return true;
}

bool HS071_NLP::eval_f(Index n, const Number* x, bool new_x, Number& obj_value)
{
  obj_value = x[0]+x[1]*(1.3E1/1.0E1)+x[2]+x[3]*(1.3E1/1.0E1)+x[4]+x[5]*(1.3E1/1.0E1)+x[8]+x[9]*(1.3E1/1.0E1)+x[10]+x[11]*(1.3E1/1.0E1)+x[12]+x[13]*(1.3E1/1.0E1);
  return true;
}

bool HS071_NLP::eval_grad_f(Index n, const Number* x, bool new_x, Number* grad_f)
{
  grad_f[0] = 1.0;
  grad_f[1] = 1.3E1/1.0E1;
  grad_f[2] = 1.0;
  grad_f[3] = 1.3E1/1.0E1;
  grad_f[4] = 1.0;
  grad_f[5] = 1.3E1/1.0E1;
  grad_f[8] = 1.0;
  grad_f[9] = 1.3E1/1.0E1;
  grad_f[10] = 1.0;
  grad_f[11] = 1.3E1/1.0E1;
  grad_f[12] = 1.0;
  grad_f[13] = 1.3E1/1.0E1;
  return true;
}

bool HS071_NLP::eval_g(Index n, const Number* x, bool new_x, Index m, Number* g)
{
  g[0] = ell_arcs[0][0]*(2.1E1/3.2E1)+x[1]*4.644609375-v_max[0][0]*x[1]-x[1]*x[6]*(1.3E1/6.4E1);
  g[1] = ell_arcs[0][0]*(-2.1E1/3.2E1)-x[1]*4.644609375+x[1]*x[6]*(1.3E1/6.4E1);
  g[2] = ell_arcs[0][0]*(9.0/8.0)+x[1]*1.5924375-v_max[0][0]*x[1]-x[1]*x[6]*(5.0/1.6E1);
  g[3] = ell_arcs[0][0]*(-9.0/8.0)-x[1]*1.5924375+x[1]*x[6]*(5.0/1.6E1);
  g[4] = ell_arcs[0][0]*(4.5E1/3.2E1)-x[1]*6.63515625E-1-v_max[0][0]*x[1]-x[1]*x[6]*(2.1E1/6.4E1);
  g[5] = ell_arcs[0][0]*(-4.5E1/3.2E1)+x[1]*6.63515625E-1+x[1]*x[6]*(2.1E1/6.4E1);
  g[6] = ell_arcs[0][0]*(3.0/2.0)-x[1]*2.12325-v_max[0][0]*x[1]-x[1]*x[6]*(1.0/4.0);
  g[7] = ell_arcs[0][0]*(-3.0/2.0)+x[1]*2.12325+x[1]*x[6]*(1.0/4.0);
  g[8] = ell_arcs[0][0]*(4.5E1/3.2E1)-x[1]*2.786765625-v_max[0][0]*x[1]-x[1]*x[6]*(5.0/6.4E1);
  g[9] = ell_arcs[0][0]*(-4.5E1/3.2E1)+x[1]*2.786765625+x[1]*x[6]*(5.0/6.4E1);
  g[10] = ell_arcs[0][0]*(9.0/8.0)-x[1]*2.6540625-v_max[0][0]*x[1]+x[1]*x[6]*(3.0/1.6E1);
  g[11] = ell_arcs[0][0]*(-9.0/8.0)+x[1]*2.6540625-x[1]*x[6]*(3.0/1.6E1);
  g[12] = ell_arcs[0][0]*(2.1E1/3.2E1)-x[1]*1.725140625-v_max[0][0]*x[1]+x[1]*x[6]*(3.5E1/6.4E1);
  g[13] = ell_arcs[0][0]*(-2.1E1/3.2E1)+x[1]*1.725140625-x[1]*x[6]*(3.5E1/6.4E1);
  g[14] = ell_arcs[1][0]*(2.1E1/3.2E1)-v_max[1][0]*x[3]+x[3]*x[6]*(3.5E1/6.4E1)-x[3]*x[7]*(1.3E1/6.4E1);
  g[15] = ell_arcs[1][0]*(-2.1E1/3.2E1)-x[3]*x[6]*(3.5E1/6.4E1)+x[3]*x[7]*(1.3E1/6.4E1);
  g[16] = ell_arcs[1][0]*(9.0/8.0)-v_max[1][0]*x[3]+x[3]*x[6]*(3.0/1.6E1)-x[3]*x[7]*(5.0/1.6E1);
  g[17] = ell_arcs[1][0]*(-9.0/8.0)-x[3]*x[6]*(3.0/1.6E1)+x[3]*x[7]*(5.0/1.6E1);
  g[18] = ell_arcs[1][0]*(4.5E1/3.2E1)-v_max[1][0]*x[3]-x[3]*x[6]*(5.0/6.4E1)-x[3]*x[7]*(2.1E1/6.4E1);
  g[19] = ell_arcs[1][0]*(-4.5E1/3.2E1)+x[3]*x[6]*(5.0/6.4E1)+x[3]*x[7]*(2.1E1/6.4E1);
  g[20] = ell_arcs[1][0]*(3.0/2.0)-v_max[1][0]*x[3]-x[3]*x[6]*(1.0/4.0)-x[3]*x[7]*(1.0/4.0);
  g[21] = ell_arcs[1][0]*(-3.0/2.0)+x[3]*x[6]*(1.0/4.0)+x[3]*x[7]*(1.0/4.0);
  g[22] = ell_arcs[1][0]*(4.5E1/3.2E1)-v_max[1][0]*x[3]-x[3]*x[6]*(2.1E1/6.4E1)-x[3]*x[7]*(5.0/6.4E1);
  g[23] = ell_arcs[1][0]*(-4.5E1/3.2E1)+x[3]*x[6]*(2.1E1/6.4E1)+x[3]*x[7]*(5.0/6.4E1);
  g[24] = ell_arcs[1][0]*(9.0/8.0)-v_max[1][0]*x[3]-x[3]*x[6]*(5.0/1.6E1)+x[3]*x[7]*(3.0/1.6E1);
  g[25] = ell_arcs[1][0]*(-9.0/8.0)+x[3]*x[6]*(5.0/1.6E1)-x[3]*x[7]*(3.0/1.6E1);
  g[26] = ell_arcs[1][0]*(2.1E1/3.2E1)-v_max[1][0]*x[3]-x[3]*x[6]*(1.3E1/6.4E1)+x[3]*x[7]*(3.5E1/6.4E1);
  g[27] = ell_arcs[1][0]*(-2.1E1/3.2E1)+x[3]*x[6]*(1.3E1/6.4E1)-x[3]*x[7]*(3.5E1/6.4E1);
  g[28] = ell_arcs[2][0]*(2.1E1/3.2E1)-v_max[2][0]*x[5]+x[5]*x[7]*(3.5E1/6.4E1);
  g[29] = ell_arcs[2][0]*(-2.1E1/3.2E1)-x[5]*x[7]*(3.5E1/6.4E1);
  g[30] = ell_arcs[2][0]*(9.0/8.0)-v_max[2][0]*x[5]+x[5]*x[7]*(3.0/1.6E1);
  g[31] = ell_arcs[2][0]*(-9.0/8.0)-x[5]*x[7]*(3.0/1.6E1);
  g[32] = ell_arcs[2][0]*(4.5E1/3.2E1)-v_max[2][0]*x[5]-x[5]*x[7]*(5.0/6.4E1);
  g[33] = ell_arcs[2][0]*(-4.5E1/3.2E1)+x[5]*x[7]*(5.0/6.4E1);
  g[34] = ell_arcs[2][0]*(3.0/2.0)-v_max[2][0]*x[5]-x[5]*x[7]*(1.0/4.0);
  g[35] = ell_arcs[2][0]*(-3.0/2.0)+x[5]*x[7]*(1.0/4.0);
  g[36] = ell_arcs[2][0]*(4.5E1/3.2E1)-v_max[2][0]*x[5]-x[5]*x[7]*(2.1E1/6.4E1);
  g[37] = ell_arcs[2][0]*(-4.5E1/3.2E1)+x[5]*x[7]*(2.1E1/6.4E1);
  g[38] = ell_arcs[2][0]*(9.0/8.0)-v_max[2][0]*x[5]-x[5]*x[7]*(5.0/1.6E1);
  g[39] = ell_arcs[2][0]*(-9.0/8.0)+x[5]*x[7]*(5.0/1.6E1);
  g[40] = ell_arcs[2][0]*(2.1E1/3.2E1)-v_max[2][0]*x[5]-x[5]*x[7]*(1.3E1/6.4E1);
  g[41] = ell_arcs[2][0]*(-2.1E1/3.2E1)+x[5]*x[7]*(1.3E1/6.4E1);
  g[42] = ell_arcs[0][1]*(2.1E1/3.2E1)+x[9]*4.644609375-v_max[0][1]*x[9]-x[9]*x[14]*(1.3E1/6.4E1);
  g[43] = ell_arcs[0][1]*(-2.1E1/3.2E1)-x[9]*4.644609375+x[9]*x[14]*(1.3E1/6.4E1);
  g[44] = ell_arcs[0][1]*(9.0/8.0)+x[9]*1.5924375-v_max[0][1]*x[9]-x[9]*x[14]*(5.0/1.6E1);
  g[45] = ell_arcs[0][1]*(-9.0/8.0)-x[9]*1.5924375+x[9]*x[14]*(5.0/1.6E1);
  g[46] = ell_arcs[0][1]*(4.5E1/3.2E1)-x[9]*6.63515625E-1-v_max[0][1]*x[9]-x[9]*x[14]*(2.1E1/6.4E1);
  g[47] = ell_arcs[0][1]*(-4.5E1/3.2E1)+x[9]*6.63515625E-1+x[9]*x[14]*(2.1E1/6.4E1);
  g[48] = ell_arcs[0][1]*(3.0/2.0)-x[9]*2.12325-v_max[0][1]*x[9]-x[9]*x[14]*(1.0/4.0);
  g[49] = ell_arcs[0][1]*(-3.0/2.0)+x[9]*2.12325+x[9]*x[14]*(1.0/4.0);
  g[50] = ell_arcs[0][1]*(4.5E1/3.2E1)-x[9]*2.786765625-v_max[0][1]*x[9]-x[9]*x[14]*(5.0/6.4E1);
  g[51] = ell_arcs[0][1]*(-4.5E1/3.2E1)+x[9]*2.786765625+x[9]*x[14]*(5.0/6.4E1);
  g[52] = ell_arcs[0][1]*(9.0/8.0)-x[9]*2.6540625-v_max[0][1]*x[9]+x[9]*x[14]*(3.0/1.6E1);
  g[53] = ell_arcs[0][1]*(-9.0/8.0)+x[9]*2.6540625-x[9]*x[14]*(3.0/1.6E1);
  g[54] = ell_arcs[0][1]*(2.1E1/3.2E1)-x[9]*1.725140625-v_max[0][1]*x[9]+x[9]*x[14]*(3.5E1/6.4E1);
  g[55] = ell_arcs[0][1]*(-2.1E1/3.2E1)+x[9]*1.725140625-x[9]*x[14]*(3.5E1/6.4E1);
  g[56] = ell_arcs[1][1]*(2.1E1/3.2E1)-v_max[1][1]*x[11]+x[11]*x[14]*(3.5E1/6.4E1)-x[11]*x[15]*(1.3E1/6.4E1);
  g[57] = ell_arcs[1][1]*(-2.1E1/3.2E1)-x[11]*x[14]*(3.5E1/6.4E1)+x[11]*x[15]*(1.3E1/6.4E1);
  g[58] = ell_arcs[1][1]*(9.0/8.0)-v_max[1][1]*x[11]+x[11]*x[14]*(3.0/1.6E1)-x[11]*x[15]*(5.0/1.6E1);
  g[59] = ell_arcs[1][1]*(-9.0/8.0)-x[11]*x[14]*(3.0/1.6E1)+x[11]*x[15]*(5.0/1.6E1);
  g[60] = ell_arcs[1][1]*(4.5E1/3.2E1)-v_max[1][1]*x[11]-x[11]*x[14]*(5.0/6.4E1)-x[11]*x[15]*(2.1E1/6.4E1);
  g[61] = ell_arcs[1][1]*(-4.5E1/3.2E1)+x[11]*x[14]*(5.0/6.4E1)+x[11]*x[15]*(2.1E1/6.4E1);
  g[62] = ell_arcs[1][1]*(3.0/2.0)-v_max[1][1]*x[11]-x[11]*x[14]*(1.0/4.0)-x[11]*x[15]*(1.0/4.0);
  g[63] = ell_arcs[1][1]*(-3.0/2.0)+x[11]*x[14]*(1.0/4.0)+x[11]*x[15]*(1.0/4.0);
  g[64] = ell_arcs[1][1]*(4.5E1/3.2E1)-v_max[1][1]*x[11]-x[11]*x[14]*(2.1E1/6.4E1)-x[11]*x[15]*(5.0/6.4E1);
  g[65] = ell_arcs[1][1]*(-4.5E1/3.2E1)+x[11]*x[14]*(2.1E1/6.4E1)+x[11]*x[15]*(5.0/6.4E1);
  g[66] = ell_arcs[1][1]*(9.0/8.0)-v_max[1][1]*x[11]-x[11]*x[14]*(5.0/1.6E1)+x[11]*x[15]*(3.0/1.6E1);
  g[67] = ell_arcs[1][1]*(-9.0/8.0)+x[11]*x[14]*(5.0/1.6E1)-x[11]*x[15]*(3.0/1.6E1);
  g[68] = ell_arcs[1][1]*(2.1E1/3.2E1)-v_max[1][1]*x[11]-x[11]*x[14]*(1.3E1/6.4E1)+x[11]*x[15]*(3.5E1/6.4E1);
  g[69] = ell_arcs[1][1]*(-2.1E1/3.2E1)+x[11]*x[14]*(1.3E1/6.4E1)-x[11]*x[15]*(3.5E1/6.4E1);
  g[70] = ell_arcs[2][1]*(2.1E1/3.2E1)-v_max[2][1]*x[13]+x[13]*x[15]*(3.5E1/6.4E1);
  g[71] = ell_arcs[2][1]*(-2.1E1/3.2E1)-x[13]*x[15]*(3.5E1/6.4E1);
  g[72] = ell_arcs[2][1]*(9.0/8.0)-v_max[2][1]*x[13]+x[13]*x[15]*(3.0/1.6E1);
  g[73] = ell_arcs[2][1]*(-9.0/8.0)-x[13]*x[15]*(3.0/1.6E1);
  g[74] = ell_arcs[2][1]*(4.5E1/3.2E1)-v_max[2][1]*x[13]-x[13]*x[15]*(5.0/6.4E1);
  g[75] = ell_arcs[2][1]*(-4.5E1/3.2E1)+x[13]*x[15]*(5.0/6.4E1);
  g[76] = ell_arcs[2][1]*(3.0/2.0)-v_max[2][1]*x[13]-x[13]*x[15]*(1.0/4.0);
  g[77] = ell_arcs[2][1]*(-3.0/2.0)+x[13]*x[15]*(1.0/4.0);
  g[78] = ell_arcs[2][1]*(4.5E1/3.2E1)-v_max[2][1]*x[13]-x[13]*x[15]*(2.1E1/6.4E1);
  g[79] = ell_arcs[2][1]*(-4.5E1/3.2E1)+x[13]*x[15]*(2.1E1/6.4E1);
  g[80] = ell_arcs[2][1]*(9.0/8.0)-v_max[2][1]*x[13]-x[13]*x[15]*(5.0/1.6E1);
  g[81] = ell_arcs[2][1]*(-9.0/8.0)+x[13]*x[15]*(5.0/1.6E1);
  g[82] = ell_arcs[2][1]*(2.1E1/3.2E1)-v_max[2][1]*x[13]-x[13]*x[15]*(1.3E1/6.4E1);
  g[83] = ell_arcs[2][1]*(-2.1E1/3.2E1)+x[13]*x[15]*(1.3E1/6.4E1);
  g[84] = x[0]*8.493;
  g[85] = x[2]*x[6];
  g[86] = x[4]*x[7];
  g[87] = x[8]*8.493;
  g[88] = x[10]*x[14];
  g[89] = x[12]*x[15];
  g[90] = x[0]+x[1]+x[2]+x[3]-x[8]-x[9]-x[10];
  return true;
}

bool HS071_NLP::eval_jac_g(Index n, const Number* x, bool new_x, Index m, Index nele_jac, Index* iRow, Index *jCol,  Number* values)
{
  if (values == NULL) {
    iRow[0] = 84; jCol[0] = 0;
    iRow[1] = 90; jCol[1] = 0;
    iRow[2] = 0; jCol[2] = 1;
    iRow[3] = 1; jCol[3] = 1;
    iRow[4] = 2; jCol[4] = 1;
    iRow[5] = 3; jCol[5] = 1;
    iRow[6] = 4; jCol[6] = 1;
    iRow[7] = 5; jCol[7] = 1;
    iRow[8] = 6; jCol[8] = 1;
    iRow[9] = 7; jCol[9] = 1;
    iRow[10] = 8; jCol[10] = 1;
    iRow[11] = 9; jCol[11] = 1;
    iRow[12] = 10; jCol[12] = 1;
    iRow[13] = 11; jCol[13] = 1;
    iRow[14] = 12; jCol[14] = 1;
    iRow[15] = 13; jCol[15] = 1;
    iRow[16] = 90; jCol[16] = 1;
    iRow[17] = 85; jCol[17] = 2;
    iRow[18] = 90; jCol[18] = 2;
    iRow[19] = 14; jCol[19] = 3;
    iRow[20] = 15; jCol[20] = 3;
    iRow[21] = 16; jCol[21] = 3;
    iRow[22] = 17; jCol[22] = 3;
    iRow[23] = 18; jCol[23] = 3;
    iRow[24] = 19; jCol[24] = 3;
    iRow[25] = 20; jCol[25] = 3;
    iRow[26] = 21; jCol[26] = 3;
    iRow[27] = 22; jCol[27] = 3;
    iRow[28] = 23; jCol[28] = 3;
    iRow[29] = 24; jCol[29] = 3;
    iRow[30] = 25; jCol[30] = 3;
    iRow[31] = 26; jCol[31] = 3;
    iRow[32] = 27; jCol[32] = 3;
    iRow[33] = 90; jCol[33] = 3;
    iRow[34] = 86; jCol[34] = 4;
    iRow[35] = 28; jCol[35] = 5;
    iRow[36] = 29; jCol[36] = 5;
    iRow[37] = 30; jCol[37] = 5;
    iRow[38] = 31; jCol[38] = 5;
    iRow[39] = 32; jCol[39] = 5;
    iRow[40] = 33; jCol[40] = 5;
    iRow[41] = 34; jCol[41] = 5;
    iRow[42] = 35; jCol[42] = 5;
    iRow[43] = 36; jCol[43] = 5;
    iRow[44] = 37; jCol[44] = 5;
    iRow[45] = 38; jCol[45] = 5;
    iRow[46] = 39; jCol[46] = 5;
    iRow[47] = 40; jCol[47] = 5;
    iRow[48] = 41; jCol[48] = 5;
    iRow[49] = 0; jCol[49] = 6;
    iRow[50] = 1; jCol[50] = 6;
    iRow[51] = 2; jCol[51] = 6;
    iRow[52] = 3; jCol[52] = 6;
    iRow[53] = 4; jCol[53] = 6;
    iRow[54] = 5; jCol[54] = 6;
    iRow[55] = 6; jCol[55] = 6;
    iRow[56] = 7; jCol[56] = 6;
    iRow[57] = 8; jCol[57] = 6;
    iRow[58] = 9; jCol[58] = 6;
    iRow[59] = 10; jCol[59] = 6;
    iRow[60] = 11; jCol[60] = 6;
    iRow[61] = 12; jCol[61] = 6;
    iRow[62] = 13; jCol[62] = 6;
    iRow[63] = 14; jCol[63] = 6;
    iRow[64] = 15; jCol[64] = 6;
    iRow[65] = 16; jCol[65] = 6;
    iRow[66] = 17; jCol[66] = 6;
    iRow[67] = 18; jCol[67] = 6;
    iRow[68] = 19; jCol[68] = 6;
    iRow[69] = 20; jCol[69] = 6;
    iRow[70] = 21; jCol[70] = 6;
    iRow[71] = 22; jCol[71] = 6;
    iRow[72] = 23; jCol[72] = 6;
    iRow[73] = 24; jCol[73] = 6;
    iRow[74] = 25; jCol[74] = 6;
    iRow[75] = 26; jCol[75] = 6;
    iRow[76] = 27; jCol[76] = 6;
    iRow[77] = 85; jCol[77] = 6;
    iRow[78] = 14; jCol[78] = 7;
    iRow[79] = 15; jCol[79] = 7;
    iRow[80] = 16; jCol[80] = 7;
    iRow[81] = 17; jCol[81] = 7;
    iRow[82] = 18; jCol[82] = 7;
    iRow[83] = 19; jCol[83] = 7;
    iRow[84] = 20; jCol[84] = 7;
    iRow[85] = 21; jCol[85] = 7;
    iRow[86] = 22; jCol[86] = 7;
    iRow[87] = 23; jCol[87] = 7;
    iRow[88] = 24; jCol[88] = 7;
    iRow[89] = 25; jCol[89] = 7;
    iRow[90] = 26; jCol[90] = 7;
    iRow[91] = 27; jCol[91] = 7;
    iRow[92] = 28; jCol[92] = 7;
    iRow[93] = 29; jCol[93] = 7;
    iRow[94] = 30; jCol[94] = 7;
    iRow[95] = 31; jCol[95] = 7;
    iRow[96] = 32; jCol[96] = 7;
    iRow[97] = 33; jCol[97] = 7;
    iRow[98] = 34; jCol[98] = 7;
    iRow[99] = 35; jCol[99] = 7;
    iRow[100] = 36; jCol[100] = 7;
    iRow[101] = 37; jCol[101] = 7;
    iRow[102] = 38; jCol[102] = 7;
    iRow[103] = 39; jCol[103] = 7;
    iRow[104] = 40; jCol[104] = 7;
    iRow[105] = 41; jCol[105] = 7;
    iRow[106] = 86; jCol[106] = 7;
    iRow[107] = 87; jCol[107] = 8;
    iRow[108] = 90; jCol[108] = 8;
    iRow[109] = 42; jCol[109] = 9;
    iRow[110] = 43; jCol[110] = 9;
    iRow[111] = 44; jCol[111] = 9;
    iRow[112] = 45; jCol[112] = 9;
    iRow[113] = 46; jCol[113] = 9;
    iRow[114] = 47; jCol[114] = 9;
    iRow[115] = 48; jCol[115] = 9;
    iRow[116] = 49; jCol[116] = 9;
    iRow[117] = 50; jCol[117] = 9;
    iRow[118] = 51; jCol[118] = 9;
    iRow[119] = 52; jCol[119] = 9;
    iRow[120] = 53; jCol[120] = 9;
    iRow[121] = 54; jCol[121] = 9;
    iRow[122] = 55; jCol[122] = 9;
    iRow[123] = 90; jCol[123] = 9;
    iRow[124] = 88; jCol[124] = 10;
    iRow[125] = 90; jCol[125] = 10;
    iRow[126] = 56; jCol[126] = 11;
    iRow[127] = 57; jCol[127] = 11;
    iRow[128] = 58; jCol[128] = 11;
    iRow[129] = 59; jCol[129] = 11;
    iRow[130] = 60; jCol[130] = 11;
    iRow[131] = 61; jCol[131] = 11;
    iRow[132] = 62; jCol[132] = 11;
    iRow[133] = 63; jCol[133] = 11;
    iRow[134] = 64; jCol[134] = 11;
    iRow[135] = 65; jCol[135] = 11;
    iRow[136] = 66; jCol[136] = 11;
    iRow[137] = 67; jCol[137] = 11;
    iRow[138] = 68; jCol[138] = 11;
    iRow[139] = 69; jCol[139] = 11;
    iRow[140] = 89; jCol[140] = 12;
    iRow[141] = 70; jCol[141] = 13;
    iRow[142] = 71; jCol[142] = 13;
    iRow[143] = 72; jCol[143] = 13;
    iRow[144] = 73; jCol[144] = 13;
    iRow[145] = 74; jCol[145] = 13;
    iRow[146] = 75; jCol[146] = 13;
    iRow[147] = 76; jCol[147] = 13;
    iRow[148] = 77; jCol[148] = 13;
    iRow[149] = 78; jCol[149] = 13;
    iRow[150] = 79; jCol[150] = 13;
    iRow[151] = 80; jCol[151] = 13;
    iRow[152] = 81; jCol[152] = 13;
    iRow[153] = 82; jCol[153] = 13;
    iRow[154] = 83; jCol[154] = 13;
    iRow[155] = 42; jCol[155] = 14;
    iRow[156] = 43; jCol[156] = 14;
    iRow[157] = 44; jCol[157] = 14;
    iRow[158] = 45; jCol[158] = 14;
    iRow[159] = 46; jCol[159] = 14;
    iRow[160] = 47; jCol[160] = 14;
    iRow[161] = 48; jCol[161] = 14;
    iRow[162] = 49; jCol[162] = 14;
    iRow[163] = 50; jCol[163] = 14;
    iRow[164] = 51; jCol[164] = 14;
    iRow[165] = 52; jCol[165] = 14;
    iRow[166] = 53; jCol[166] = 14;
    iRow[167] = 54; jCol[167] = 14;
    iRow[168] = 55; jCol[168] = 14;
    iRow[169] = 56; jCol[169] = 14;
    iRow[170] = 57; jCol[170] = 14;
    iRow[171] = 58; jCol[171] = 14;
    iRow[172] = 59; jCol[172] = 14;
    iRow[173] = 60; jCol[173] = 14;
    iRow[174] = 61; jCol[174] = 14;
    iRow[175] = 62; jCol[175] = 14;
    iRow[176] = 63; jCol[176] = 14;
    iRow[177] = 64; jCol[177] = 14;
    iRow[178] = 65; jCol[178] = 14;
    iRow[179] = 66; jCol[179] = 14;
    iRow[180] = 67; jCol[180] = 14;
    iRow[181] = 68; jCol[181] = 14;
    iRow[182] = 69; jCol[182] = 14;
    iRow[183] = 88; jCol[183] = 14;
    iRow[184] = 56; jCol[184] = 15;
    iRow[185] = 57; jCol[185] = 15;
    iRow[186] = 58; jCol[186] = 15;
    iRow[187] = 59; jCol[187] = 15;
    iRow[188] = 60; jCol[188] = 15;
    iRow[189] = 61; jCol[189] = 15;
    iRow[190] = 62; jCol[190] = 15;
    iRow[191] = 63; jCol[191] = 15;
    iRow[192] = 64; jCol[192] = 15;
    iRow[193] = 65; jCol[193] = 15;
    iRow[194] = 66; jCol[194] = 15;
    iRow[195] = 67; jCol[195] = 15;
    iRow[196] = 68; jCol[196] = 15;
    iRow[197] = 69; jCol[197] = 15;
    iRow[198] = 70; jCol[198] = 15;
    iRow[199] = 71; jCol[199] = 15;
    iRow[200] = 72; jCol[200] = 15;
    iRow[201] = 73; jCol[201] = 15;
    iRow[202] = 74; jCol[202] = 15;
    iRow[203] = 75; jCol[203] = 15;
    iRow[204] = 76; jCol[204] = 15;
    iRow[205] = 77; jCol[205] = 15;
    iRow[206] = 78; jCol[206] = 15;
    iRow[207] = 79; jCol[207] = 15;
    iRow[208] = 80; jCol[208] = 15;
    iRow[209] = 81; jCol[209] = 15;
    iRow[210] = 82; jCol[210] = 15;
    iRow[211] = 83; jCol[211] = 15;
    iRow[212] = 89; jCol[212] = 15;
  }
  else {
    values[0] = 8.493;
    values[1] = 1.0;
    values[2] = -v_max[0][0]-x[6]*(1.3E1/6.4E1)+4.644609375;
    values[3] = x[6]*(1.3E1/6.4E1)-4.644609375;
    values[4] = -v_max[0][0]-x[6]*(5.0/1.6E1)+1.5924375;
    values[5] = x[6]*(5.0/1.6E1)-1.5924375;
    values[6] = -v_max[0][0]-x[6]*(2.1E1/6.4E1)-6.63515625E-1;
    values[7] = x[6]*(2.1E1/6.4E1)+6.63515625E-1;
    values[8] = -v_max[0][0]-x[6]*(1.0/4.0)-2.12325;
    values[9] = x[6]*(1.0/4.0)+2.12325;
    values[10] = -v_max[0][0]-x[6]*(5.0/6.4E1)-2.786765625;
    values[11] = x[6]*(5.0/6.4E1)+2.786765625;
    values[12] = -v_max[0][0]+x[6]*(3.0/1.6E1)-2.6540625;
    values[13] = x[6]*(-3.0/1.6E1)+2.6540625;
    values[14] = -v_max[0][0]+x[6]*(3.5E1/6.4E1)-1.725140625;
    values[15] = x[6]*(-3.5E1/6.4E1)+1.725140625;
    values[16] = 1.0;
    values[17] = x[6];
    values[18] = 1.0;
    values[19] = -v_max[1][0]+x[6]*(3.5E1/6.4E1)-x[7]*(1.3E1/6.4E1);
    values[20] = x[6]*(-3.5E1/6.4E1)+x[7]*(1.3E1/6.4E1);
    values[21] = -v_max[1][0]+x[6]*(3.0/1.6E1)-x[7]*(5.0/1.6E1);
    values[22] = x[6]*(-3.0/1.6E1)+x[7]*(5.0/1.6E1);
    values[23] = -v_max[1][0]-x[6]*(5.0/6.4E1)-x[7]*(2.1E1/6.4E1);
    values[24] = x[6]*(5.0/6.4E1)+x[7]*(2.1E1/6.4E1);
    values[25] = -v_max[1][0]-x[6]*(1.0/4.0)-x[7]*(1.0/4.0);
    values[26] = x[6]*(1.0/4.0)+x[7]*(1.0/4.0);
    values[27] = -v_max[1][0]-x[6]*(2.1E1/6.4E1)-x[7]*(5.0/6.4E1);
    values[28] = x[6]*(2.1E1/6.4E1)+x[7]*(5.0/6.4E1);
    values[29] = -v_max[1][0]-x[6]*(5.0/1.6E1)+x[7]*(3.0/1.6E1);
    values[30] = x[6]*(5.0/1.6E1)-x[7]*(3.0/1.6E1);
    values[31] = -v_max[1][0]-x[6]*(1.3E1/6.4E1)+x[7]*(3.5E1/6.4E1);
    values[32] = x[6]*(1.3E1/6.4E1)-x[7]*(3.5E1/6.4E1);
    values[33] = 1.0;
    values[34] = x[7];
    values[35] = -v_max[2][0]+x[7]*(3.5E1/6.4E1);
    values[36] = x[7]*(-3.5E1/6.4E1);
    values[37] = -v_max[2][0]+x[7]*(3.0/1.6E1);
    values[38] = x[7]*(-3.0/1.6E1);
    values[39] = -v_max[2][0]-x[7]*(5.0/6.4E1);
    values[40] = x[7]*(5.0/6.4E1);
    values[41] = -v_max[2][0]-x[7]*(1.0/4.0);
    values[42] = x[7]*(1.0/4.0);
    values[43] = -v_max[2][0]-x[7]*(2.1E1/6.4E1);
    values[44] = x[7]*(2.1E1/6.4E1);
    values[45] = -v_max[2][0]-x[7]*(5.0/1.6E1);
    values[46] = x[7]*(5.0/1.6E1);
    values[47] = -v_max[2][0]-x[7]*(1.3E1/6.4E1);
    values[48] = x[7]*(1.3E1/6.4E1);
    values[49] = x[1]*(-1.3E1/6.4E1);
    values[50] = x[1]*(1.3E1/6.4E1);
    values[51] = x[1]*(-5.0/1.6E1);
    values[52] = x[1]*(5.0/1.6E1);
    values[53] = x[1]*(-2.1E1/6.4E1);
    values[54] = x[1]*(2.1E1/6.4E1);
    values[55] = x[1]*(-1.0/4.0);
    values[56] = x[1]*(1.0/4.0);
    values[57] = x[1]*(-5.0/6.4E1);
    values[58] = x[1]*(5.0/6.4E1);
    values[59] = x[1]*(3.0/1.6E1);
    values[60] = x[1]*(-3.0/1.6E1);
    values[61] = x[1]*(3.5E1/6.4E1);
    values[62] = x[1]*(-3.5E1/6.4E1);
    values[63] = x[3]*(3.5E1/6.4E1);
    values[64] = x[3]*(-3.5E1/6.4E1);
    values[65] = x[3]*(3.0/1.6E1);
    values[66] = x[3]*(-3.0/1.6E1);
    values[67] = x[3]*(-5.0/6.4E1);
    values[68] = x[3]*(5.0/6.4E1);
    values[69] = x[3]*(-1.0/4.0);
    values[70] = x[3]*(1.0/4.0);
    values[71] = x[3]*(-2.1E1/6.4E1);
    values[72] = x[3]*(2.1E1/6.4E1);
    values[73] = x[3]*(-5.0/1.6E1);
    values[74] = x[3]*(5.0/1.6E1);
    values[75] = x[3]*(-1.3E1/6.4E1);
    values[76] = x[3]*(1.3E1/6.4E1);
    values[77] = x[2];
    values[78] = x[3]*(-1.3E1/6.4E1);
    values[79] = x[3]*(1.3E1/6.4E1);
    values[80] = x[3]*(-5.0/1.6E1);
    values[81] = x[3]*(5.0/1.6E1);
    values[82] = x[3]*(-2.1E1/6.4E1);
    values[83] = x[3]*(2.1E1/6.4E1);
    values[84] = x[3]*(-1.0/4.0);
    values[85] = x[3]*(1.0/4.0);
    values[86] = x[3]*(-5.0/6.4E1);
    values[87] = x[3]*(5.0/6.4E1);
    values[88] = x[3]*(3.0/1.6E1);
    values[89] = x[3]*(-3.0/1.6E1);
    values[90] = x[3]*(3.5E1/6.4E1);
    values[91] = x[3]*(-3.5E1/6.4E1);
    values[92] = x[5]*(3.5E1/6.4E1);
    values[93] = x[5]*(-3.5E1/6.4E1);
    values[94] = x[5]*(3.0/1.6E1);
    values[95] = x[5]*(-3.0/1.6E1);
    values[96] = x[5]*(-5.0/6.4E1);
    values[97] = x[5]*(5.0/6.4E1);
    values[98] = x[5]*(-1.0/4.0);
    values[99] = x[5]*(1.0/4.0);
    values[100] = x[5]*(-2.1E1/6.4E1);
    values[101] = x[5]*(2.1E1/6.4E1);
    values[102] = x[5]*(-5.0/1.6E1);
    values[103] = x[5]*(5.0/1.6E1);
    values[104] = x[5]*(-1.3E1/6.4E1);
    values[105] = x[5]*(1.3E1/6.4E1);
    values[106] = x[4];
    values[107] = 8.493;
    values[108] = -1.0;
    values[109] = -v_max[0][1]-x[14]*(1.3E1/6.4E1)+4.644609375;
    values[110] = x[14]*(1.3E1/6.4E1)-4.644609375;
    values[111] = -v_max[0][1]-x[14]*(5.0/1.6E1)+1.5924375;
    values[112] = x[14]*(5.0/1.6E1)-1.5924375;
    values[113] = -v_max[0][1]-x[14]*(2.1E1/6.4E1)-6.63515625E-1;
    values[114] = x[14]*(2.1E1/6.4E1)+6.63515625E-1;
    values[115] = -v_max[0][1]-x[14]*(1.0/4.0)-2.12325;
    values[116] = x[14]*(1.0/4.0)+2.12325;
    values[117] = -v_max[0][1]-x[14]*(5.0/6.4E1)-2.786765625;
    values[118] = x[14]*(5.0/6.4E1)+2.786765625;
    values[119] = -v_max[0][1]+x[14]*(3.0/1.6E1)-2.6540625;
    values[120] = x[14]*(-3.0/1.6E1)+2.6540625;
    values[121] = -v_max[0][1]+x[14]*(3.5E1/6.4E1)-1.725140625;
    values[122] = x[14]*(-3.5E1/6.4E1)+1.725140625;
    values[123] = -1.0;
    values[124] = x[14];
    values[125] = -1.0;
    values[126] = -v_max[1][1]+x[14]*(3.5E1/6.4E1)-x[15]*(1.3E1/6.4E1);
    values[127] = x[14]*(-3.5E1/6.4E1)+x[15]*(1.3E1/6.4E1);
    values[128] = -v_max[1][1]+x[14]*(3.0/1.6E1)-x[15]*(5.0/1.6E1);
    values[129] = x[14]*(-3.0/1.6E1)+x[15]*(5.0/1.6E1);
    values[130] = -v_max[1][1]-x[14]*(5.0/6.4E1)-x[15]*(2.1E1/6.4E1);
    values[131] = x[14]*(5.0/6.4E1)+x[15]*(2.1E1/6.4E1);
    values[132] = -v_max[1][1]-x[14]*(1.0/4.0)-x[15]*(1.0/4.0);
    values[133] = x[14]*(1.0/4.0)+x[15]*(1.0/4.0);
    values[134] = -v_max[1][1]-x[14]*(2.1E1/6.4E1)-x[15]*(5.0/6.4E1);
    values[135] = x[14]*(2.1E1/6.4E1)+x[15]*(5.0/6.4E1);
    values[136] = -v_max[1][1]-x[14]*(5.0/1.6E1)+x[15]*(3.0/1.6E1);
    values[137] = x[14]*(5.0/1.6E1)-x[15]*(3.0/1.6E1);
    values[138] = -v_max[1][1]-x[14]*(1.3E1/6.4E1)+x[15]*(3.5E1/6.4E1);
    values[139] = x[14]*(1.3E1/6.4E1)-x[15]*(3.5E1/6.4E1);
    values[140] = x[15];
    values[141] = -v_max[2][1]+x[15]*(3.5E1/6.4E1);
    values[142] = x[15]*(-3.5E1/6.4E1);
    values[143] = -v_max[2][1]+x[15]*(3.0/1.6E1);
    values[144] = x[15]*(-3.0/1.6E1);
    values[145] = -v_max[2][1]-x[15]*(5.0/6.4E1);
    values[146] = x[15]*(5.0/6.4E1);
    values[147] = -v_max[2][1]-x[15]*(1.0/4.0);
    values[148] = x[15]*(1.0/4.0);
    values[149] = -v_max[2][1]-x[15]*(2.1E1/6.4E1);
    values[150] = x[15]*(2.1E1/6.4E1);
    values[151] = -v_max[2][1]-x[15]*(5.0/1.6E1);
    values[152] = x[15]*(5.0/1.6E1);
    values[153] = -v_max[2][1]-x[15]*(1.3E1/6.4E1);
    values[154] = x[15]*(1.3E1/6.4E1);
    values[155] = x[9]*(-1.3E1/6.4E1);
    values[156] = x[9]*(1.3E1/6.4E1);
    values[157] = x[9]*(-5.0/1.6E1);
    values[158] = x[9]*(5.0/1.6E1);
    values[159] = x[9]*(-2.1E1/6.4E1);
    values[160] = x[9]*(2.1E1/6.4E1);
    values[161] = x[9]*(-1.0/4.0);
    values[162] = x[9]*(1.0/4.0);
    values[163] = x[9]*(-5.0/6.4E1);
    values[164] = x[9]*(5.0/6.4E1);
    values[165] = x[9]*(3.0/1.6E1);
    values[166] = x[9]*(-3.0/1.6E1);
    values[167] = x[9]*(3.5E1/6.4E1);
    values[168] = x[9]*(-3.5E1/6.4E1);
    values[169] = x[11]*(3.5E1/6.4E1);
    values[170] = x[11]*(-3.5E1/6.4E1);
    values[171] = x[11]*(3.0/1.6E1);
    values[172] = x[11]*(-3.0/1.6E1);
    values[173] = x[11]*(-5.0/6.4E1);
    values[174] = x[11]*(5.0/6.4E1);
    values[175] = x[11]*(-1.0/4.0);
    values[176] = x[11]*(1.0/4.0);
    values[177] = x[11]*(-2.1E1/6.4E1);
    values[178] = x[11]*(2.1E1/6.4E1);
    values[179] = x[11]*(-5.0/1.6E1);
    values[180] = x[11]*(5.0/1.6E1);
    values[181] = x[11]*(-1.3E1/6.4E1);
    values[182] = x[11]*(1.3E1/6.4E1);
    values[183] = x[10];
    values[184] = x[11]*(-1.3E1/6.4E1);
    values[185] = x[11]*(1.3E1/6.4E1);
    values[186] = x[11]*(-5.0/1.6E1);
    values[187] = x[11]*(5.0/1.6E1);
    values[188] = x[11]*(-2.1E1/6.4E1);
    values[189] = x[11]*(2.1E1/6.4E1);
    values[190] = x[11]*(-1.0/4.0);
    values[191] = x[11]*(1.0/4.0);
    values[192] = x[11]*(-5.0/6.4E1);
    values[193] = x[11]*(5.0/6.4E1);
    values[194] = x[11]*(3.0/1.6E1);
    values[195] = x[11]*(-3.0/1.6E1);
    values[196] = x[11]*(3.5E1/6.4E1);
    values[197] = x[11]*(-3.5E1/6.4E1);
    values[198] = x[13]*(3.5E1/6.4E1);
    values[199] = x[13]*(-3.5E1/6.4E1);
    values[200] = x[13]*(3.0/1.6E1);
    values[201] = x[13]*(-3.0/1.6E1);
    values[202] = x[13]*(-5.0/6.4E1);
    values[203] = x[13]*(5.0/6.4E1);
    values[204] = x[13]*(-1.0/4.0);
    values[205] = x[13]*(1.0/4.0);
    values[206] = x[13]*(-2.1E1/6.4E1);
    values[207] = x[13]*(2.1E1/6.4E1);
    values[208] = x[13]*(-5.0/1.6E1);
    values[209] = x[13]*(5.0/1.6E1);
    values[210] = x[13]*(-1.3E1/6.4E1);
    values[211] = x[13]*(1.3E1/6.4E1);
    values[212] = x[12];
  }
  return true;
}
bool HS071_NLP::eval_h(Index n, const Number* x, bool new_x, Number obj_factor, Index m, const Number* lambda, bool new_lambda, Index nele_hess, Index* iRow, Index* jCol, Number* values)
{
  if (values == NULL) {
    iRow[0] = 6; jCol[0] = 1;
    iRow[1] = 6; jCol[1] = 2;
    iRow[2] = 6; jCol[2] = 3;
    iRow[3] = 7; jCol[3] = 3;
    iRow[4] = 7; jCol[4] = 4;
    iRow[5] = 7; jCol[5] = 5;
    iRow[6] = 14; jCol[6] = 9;
    iRow[7] = 14; jCol[7] = 10;
    iRow[8] = 14; jCol[8] = 11;
    iRow[9] = 15; jCol[9] = 11;
    iRow[10] = 15; jCol[10] = 12;
    iRow[11] = 15; jCol[11] = 13;
  }
  else {
    values[0] = lambda[0]*(-1.3E1/6.4E1)+lambda[1]*(1.3E1/6.4E1)-lambda[2]*(5.0/1.6E1)+lambda[3]*(5.0/1.6E1)-lambda[4]*(2.1E1/6.4E1)+lambda[5]*(2.1E1/6.4E1)-lambda[6]*(1.0/4.0)+lambda[7]*(1.0/4.0)-lambda[8]*(5.0/6.4E1)+lambda[9]*(5.0/6.4E1)+lambda[10]*(3.0/1.6E1)-lambda[11]*(3.0/1.6E1)+lambda[12]*(3.5E1/6.4E1)-lambda[13]*(3.5E1/6.4E1);
    values[1] = lambda[85];
    values[2] = lambda[14]*(3.5E1/6.4E1)-lambda[15]*(3.5E1/6.4E1)+lambda[16]*(3.0/1.6E1)-lambda[17]*(3.0/1.6E1)-lambda[18]*(5.0/6.4E1)+lambda[19]*(5.0/6.4E1)-lambda[20]*(1.0/4.0)+lambda[21]*(1.0/4.0)-lambda[22]*(2.1E1/6.4E1)+lambda[23]*(2.1E1/6.4E1)-lambda[24]*(5.0/1.6E1)+lambda[25]*(5.0/1.6E1)-lambda[26]*(1.3E1/6.4E1)+lambda[27]*(1.3E1/6.4E1);
    values[3] = lambda[14]*(-1.3E1/6.4E1)+lambda[15]*(1.3E1/6.4E1)-lambda[16]*(5.0/1.6E1)+lambda[17]*(5.0/1.6E1)-lambda[18]*(2.1E1/6.4E1)+lambda[19]*(2.1E1/6.4E1)-lambda[20]*(1.0/4.0)+lambda[21]*(1.0/4.0)-lambda[22]*(5.0/6.4E1)+lambda[23]*(5.0/6.4E1)+lambda[24]*(3.0/1.6E1)-lambda[25]*(3.0/1.6E1)+lambda[26]*(3.5E1/6.4E1)-lambda[27]*(3.5E1/6.4E1);
    values[4] = lambda[86];
    values[5] = lambda[28]*(3.5E1/6.4E1)-lambda[29]*(3.5E1/6.4E1)+lambda[30]*(3.0/1.6E1)-lambda[31]*(3.0/1.6E1)-lambda[32]*(5.0/6.4E1)+lambda[33]*(5.0/6.4E1)-lambda[34]*(1.0/4.0)+lambda[35]*(1.0/4.0)-lambda[36]*(2.1E1/6.4E1)+lambda[37]*(2.1E1/6.4E1)-lambda[38]*(5.0/1.6E1)+lambda[39]*(5.0/1.6E1)-lambda[40]*(1.3E1/6.4E1)+lambda[41]*(1.3E1/6.4E1);
    values[6] = lambda[42]*(-1.3E1/6.4E1)+lambda[43]*(1.3E1/6.4E1)-lambda[44]*(5.0/1.6E1)+lambda[45]*(5.0/1.6E1)-lambda[46]*(2.1E1/6.4E1)+lambda[47]*(2.1E1/6.4E1)-lambda[48]*(1.0/4.0)+lambda[49]*(1.0/4.0)-lambda[50]*(5.0/6.4E1)+lambda[51]*(5.0/6.4E1)+lambda[52]*(3.0/1.6E1)-lambda[53]*(3.0/1.6E1)+lambda[54]*(3.5E1/6.4E1)-lambda[55]*(3.5E1/6.4E1);
    values[7] = lambda[88];
    values[8] = lambda[56]*(3.5E1/6.4E1)-lambda[57]*(3.5E1/6.4E1)+lambda[58]*(3.0/1.6E1)-lambda[59]*(3.0/1.6E1)-lambda[60]*(5.0/6.4E1)+lambda[61]*(5.0/6.4E1)-lambda[62]*(1.0/4.0)+lambda[63]*(1.0/4.0)-lambda[64]*(2.1E1/6.4E1)+lambda[65]*(2.1E1/6.4E1)-lambda[66]*(5.0/1.6E1)+lambda[67]*(5.0/1.6E1)-lambda[68]*(1.3E1/6.4E1)+lambda[69]*(1.3E1/6.4E1);
    values[9] = lambda[56]*(-1.3E1/6.4E1)+lambda[57]*(1.3E1/6.4E1)-lambda[58]*(5.0/1.6E1)+lambda[59]*(5.0/1.6E1)-lambda[60]*(2.1E1/6.4E1)+lambda[61]*(2.1E1/6.4E1)-lambda[62]*(1.0/4.0)+lambda[63]*(1.0/4.0)-lambda[64]*(5.0/6.4E1)+lambda[65]*(5.0/6.4E1)+lambda[66]*(3.0/1.6E1)-lambda[67]*(3.0/1.6E1)+lambda[68]*(3.5E1/6.4E1)-lambda[69]*(3.5E1/6.4E1);
    values[10] = lambda[89];
    values[11] = lambda[70]*(3.5E1/6.4E1)-lambda[71]*(3.5E1/6.4E1)+lambda[72]*(3.0/1.6E1)-lambda[73]*(3.0/1.6E1)-lambda[74]*(5.0/6.4E1)+lambda[75]*(5.0/6.4E1)-lambda[76]*(1.0/4.0)+lambda[77]*(1.0/4.0)-lambda[78]*(2.1E1/6.4E1)+lambda[79]*(2.1E1/6.4E1)-lambda[80]*(5.0/1.6E1)+lambda[81]*(5.0/1.6E1)-lambda[82]*(1.3E1/6.4E1)+lambda[83]*(1.3E1/6.4E1);
  }
  return true;
}
